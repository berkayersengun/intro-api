# Generated by Django 4.1.5 on 2023-01-07 04:50

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('sector', models.CharField(max_length=100)),
                ('symbol', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Hometown',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.CharField(max_length=100)),
                ('nationality', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='JobTitle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('country', models.CharField(max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('gender', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female'), ('Prefer not to say', 'Prefer Not To Say'), ('Other', 'Other')], max_length=30)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('weight', models.FloatField(blank=True, null=True)),
                ('height', models.FloatField(blank=True, null=True)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('marital_status', models.CharField(blank=True, choices=[('Single', 'Single'), ('Married', 'Married'), ('Seperated', 'Separated'), ('Divorced', 'Divorced'), ('Widowed', 'Widowed'), ('Prefer not to say', 'Prefer Not To Say')], max_length=30)),
                ('zodiac', models.CharField(blank=True, choices=[('Aries', 'Aries'), ('Taurus', 'Taurus'), ('Gemini', 'Gemini'), ('Cancer', 'Cancer'), ('Leo', 'Leo'), ('Virgo', 'Virgo'), ('Libra', 'Libra'), ('Scorpio', 'Scorpio'), ('Sagittarius', 'Sagittarius'), ('Aquarius', 'Aquarius'), ('Pisces', 'Pisces'), ('Prefer not to say', 'Prefer Not To Say')], max_length=30)),
                ('smoke', models.CharField(blank=True, choices=[('Never Smoke', 'Never Smoke'), ('Socially Smoke', 'Socially Smoke'), ('Smoke Regularly', 'Smoke Regularly'), ('Trying to Quit', 'Trying To Quit'), ('Prefer not to say', 'Prefer Not To Say')], max_length=30)),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('religion', models.CharField(blank=True, choices=[('Christian', 'Christian'), ('Catholic', 'Catholic'), ('Hindu', 'Hindu'), ('Jewish', 'Jewish'), ('Muslim', 'Muslim'), ('Orthodox', 'Orthodox'), ('Buddhist', 'Buddhist'), ('Spiritual', 'Spiritual'), ('Agnostic', 'Agnostic'), ('Atheist', 'Atheist'), ('Prefer not to say', 'Prefer Not To Say'), ('Other', 'Other')], max_length=30)),
                ('politics', models.CharField(blank=True, choices=[('Liberal', 'Liberal'), ('Moderate', 'Moderate'), ('Conservative', 'Conservative'), ('Apolitical', 'Apolitical'), ('Prefer not to say', 'Prefer Not To Say'), ('Other', 'Other')], max_length=30)),
                ('education_level', models.CharField(blank=True, choices=[('High School', 'High School'), ('Bachelors', 'Bachelors'), ('In College', 'In College'), ('Masters', 'Masters'), ('In Grad School', 'In Grad School'), ('PhD', 'Phd'), ('Prefer not to say', 'Prefer Not To Say')], max_length=30)),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.company')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('hometown', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hometown_city', to='accounts.hometown')),
                ('job_title', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.jobtitle')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.location')),
                ('nationality', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hometown_nationality', to='accounts.hometown')),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.school')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
